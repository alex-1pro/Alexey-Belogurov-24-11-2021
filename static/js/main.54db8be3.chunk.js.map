{"version":3,"sources":["shared/accWeatherApi.js","redux/types.js","redux/actions.js","redux/mainCradReducer.js","components/MainCardComponent/MainCardComponent.jsx","components/WeatherSingleCard/WeatherSingleCard.jsx","pages/HomePage/HomePage.jsx","components/CityWeatherCard/CityWeatherCard.jsx","pages/FavoritesPage/FavoritesPage.jsx","components/WeatherNavBar/WeatherNavBar.jsx","App.js","reportWebVitals.js","redux/homePageReducer.js","redux/favoritesPageReducer.js","redux/appReducer.js","redux/rootReducer.js","index.js"],"names":["API_KEY","CURRENT_WEATHER_URI","DAILY_FORECASTS_URI","DEFAULT_LOAD_WEATHER","AUTO_COMPLETE","DAILY_FORECASTS","GET_CURRENT_LOCATION","CHANGE_UNIT_DEGREES","ADD_TO_FAVORITES","UPDATE_CITY_NAME","CURRENT_WEATHER_FROM_FAVORITES","ERROR_DISPALY_ON","ERROR_DISPALY_OFF","changeUnitDegrees","unit","type","errorOn","text","dispatch","setTimeout","intialState","weather","weatherDaily","unitDegrees","fToC","fahrenheit","num","m","Number","Math","abs","toPrecision","round","sign","MainCardComponent","city","useState","setUnit","useSelector","state","mainCardReducer","cityData","homePageReducer","dailyWeather","useDispatch","useEffect","cityKey","a","fetch","response","json","jsonData","data","defaultLoadWeathr","className","length","Container","fluid","Row","Col","Date","date","toDateString","onClick","currentWeather","addToFavorites","src","iconId","weatherIcon","icon","weatherText","WeatherSingleCard","celsiusMin","weatherDay","weatherNight","celsiusMax","fahrenheitMin","fahrenheitMax","isDay","setIsDay","getHours","Icon","IconPhrase","replace","HomePage","props","textCity","setTextCity","dailyForecasts","error","appReducer","console","log","errorToast","Toast","bg","Body","md","onSubmit","e","preventDefault","CITY_URI","autoComplete","placeholder","onChange","target","value","hidden","xs","xxl","map","res","dayId","CityWeatherCard","history","useHistory","weatherFromFavorites","push","celsius","FavoritesPage","citiesCards","favoritesPageReducer","citiesForecasts","WeatherNavBar","Navbar","variant","Brand","href","Nav","Link","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","longitude","latitude","initialState","loading","rootReducer","combineReducers","action","location","newCity","LocalizedName","newCityKey","Key","WeatherText","WeatherIcon","Temperature","Metric","Value","Imperial","LocalObservationDateTime","newDailyForecasts","DailyForecasts","fahMinValue","Minimum","fahMaxValue","Maximum","celMinValue","celMaxValue","Day","Night","uniqid","itemIndex","findIndex","nextCitiesForecasts","splice","store","createStore","compose","applyMiddleware","thunk","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.54db8be3.chunk.js","sourcesContent":["//export const API_KEY = \"9WNZsVTjUH7OfCV8vCmWir9rnGELFggu\"\r\nexport const API_KEY = \"MiGTVt9Xdh6vttWqVfrCSx5DoDaRN0Ja\"\r\nexport const CURRENT_WEATHER_URI = \"https://dataservice.accuweather.com/currentconditions/v1/\"\r\nexport const CITY_URI = \"https://dataservice.accuweather.com/locations/v1/cities/autocomplete?\"\r\nexport const DAILY_FORECASTS_URI = \"https://dataservice.accuweather.com/forecasts/v1/daily/5day/\"\r\nexport const CURRENT_LOCATION_GEOPOSITION_URI = \"https://dataservice.accuweather.com/locations/v1/cities/geoposition/search\" ","\r\n//ACCUWEATHER API\r\nexport const DEFAULT_LOAD_WEATHER = 'DEFAULT_LOAD_WEATHER';\r\nexport const AUTO_COMPLETE = 'AUTO_COMPLETE';\r\nexport const DAILY_FORECASTS = 'DAILY_FORECASTS';\r\n\r\n//Geolocation API and ACCUWEATHER API\r\nexport const GET_CURRENT_LOCATION = 'GET_CURRENT_LOCATION';\r\n\r\n\r\n//LOCAL DATA UPDATE\r\nexport const CHANGE_UNIT_DEGREES = 'CHANGE_UNIT_DEGREES';\r\nexport const ADD_TO_FAVORITES = 'ADD_TO_FAVORITES';\r\nexport const UPDATE_CITY_NAME = 'UPDATE_CITY_NAME';\r\nexport const CURRENT_WEATHER_FROM_FAVORITES = 'CURRENT_WEATHER_FROM_FAVORITES';\r\n\r\nexport const ERROR_DISPALY_ON = 'ERROR_DISPALY_ON';\r\nexport const ERROR_DISPALY_OFF = 'ERROR_DISPALY_OFF';","import {\r\n    API_KEY,\r\n    CURRENT_WEATHER_URI,\r\n    CITY_URI,\r\n    DAILY_FORECASTS_URI,\r\n    CURRENT_LOCATION_GEOPOSITION_URI\r\n} from \"../shared/accWeatherApi\";\r\n\r\nimport {\r\n    GET_CURRENT_LOCATION,\r\n    UPDATE_CITY_NAME,\r\n    DEFAULT_LOAD_WEATHER,\r\n    AUTO_COMPLETE,\r\n    DAILY_FORECASTS,\r\n    CHANGE_UNIT_DEGREES,\r\n    ADD_TO_FAVORITES,\r\n    CURRENT_WEATHER_FROM_FAVORITES,\r\n    ERROR_DISPALY_ON,\r\n    ERROR_DISPALY_OFF\r\n} from \"./types\";\r\n\r\n\r\n//http://dataservice.accuweather.com/locations/v1/cities/geoposition/search?apikey=yIS7IdPp0gk2fQ4NU5fRmpEjBZoJvzKR&q=32.085300%2C34.781769&toplevel=true\r\nexport function  currentGeopostion() {\r\n    \r\n    const location = {\r\n        latitude: 0,\r\n        longitude: 0\r\n    };\r\n    if (!navigator.geolocation) {\r\n        console.log(\"Geolocation is'nt support in your browser\");\r\n    } else {\r\n        navigator.geolocation.getCurrentPosition((position) => {\r\n\r\n            location.latitude = position.coords.latitude;\r\n            location.longitude = position.coords.longitude;\r\n\r\n\r\n        })\r\n        return {\r\n            type: GET_CURRENT_LOCATION,\r\n            data: {\r\n                location\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\nfunction getCurrentLocation(latitude, longitude) {\r\n\r\n    return async dispatch => {\r\n\r\n        console.log(\"location  getCurrentLocation >>>>\", latitude, longitude);\r\n        try {\r\n            const response = await fetch(CURRENT_LOCATION_GEOPOSITION_URI +\r\n                \"?apikey=\" + API_KEY + \"&q=\" + latitude + \"C\" + longitude + \"&toplevel=true\");\r\n            const jsonData = await response.json();\r\n            dispatch({\r\n                type: GET_CURRENT_LOCATION,\r\n                data: jsonData\r\n            })\r\n\r\n        } catch (err) {\r\n            // console.log(\"error in loading data >> \", err.type);\r\n            dispatch(errorOn(\"error API\"));\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nexport function defaultLoadWeathr(cityKey = \"215854\") {\r\n    return async dispatch => {\r\n        try {\r\n            const response = await fetch(CURRENT_WEATHER_URI + cityKey + \"?apikey=\" + API_KEY);\r\n            const jsonData = await response.json();\r\n            dispatch({\r\n                type: DEFAULT_LOAD_WEATHER,\r\n                data: jsonData\r\n            })\r\n        } catch (err) {\r\n            // console.log(\"error in loading data >> \", err.type);\r\n            dispatch(errorOn(\"error API\"));\r\n        }\r\n    }\r\n}\r\n\r\nexport function autoComplete(city) {\r\n    return async dispatch => {\r\n        try {\r\n            const response = await fetch(CITY_URI + \"apikey=\" + API_KEY + \"&q=\" + city);\r\n            const jsonData = await response.json();\r\n            dispatch({\r\n                type: AUTO_COMPLETE,\r\n                data: jsonData\r\n            })\r\n\r\n        } catch (err) {\r\n            // console.log(\"error in loading data >> \", err.type);\r\n            dispatch(errorOn(\"error API\"));\r\n        }\r\n    }\r\n}\r\n\r\nexport function dailyForecasts(cityKey = \"215854\") {\r\n    return async dispatch => {\r\n        try {\r\n            const response = await fetch(DAILY_FORECASTS_URI + cityKey + \"?apikey=\" + API_KEY);\r\n            const jsonData = await response.json();\r\n\r\n            dispatch({\r\n                type: DAILY_FORECASTS,\r\n                data: jsonData\r\n            })\r\n        } catch (err) {\r\n            // console.log(\"error in loading data >> \", err.type);\r\n            dispatch(errorOn(\"error API\"));\r\n        }\r\n    }\r\n}\r\n\r\nexport function changeUnitDegrees(unit) {\r\n    return {\r\n        type: CHANGE_UNIT_DEGREES,\r\n        unit: unit\r\n    }\r\n}\r\n\r\nexport function addToFavorites(city, cityKey, currentWeather, dailyWeather) {\r\n    return {\r\n        type: ADD_TO_FAVORITES,\r\n        data: {\r\n            city,\r\n            cityKey,\r\n            currentWeather,\r\n            dailyWeather\r\n        }\r\n    }\r\n}\r\n\r\n// CURRENT_WEATHER_FROM_FAVORITES\r\nexport function weatherFromFavorites(city, cityKey, currentWeather, dailyWeather) {\r\n    return dispatch => {\r\n        dispatch({\r\n            type: UPDATE_CITY_NAME,\r\n            data: {\r\n                city,\r\n                cityKey\r\n            }\r\n        });\r\n        dispatch({\r\n            type: CURRENT_WEATHER_FROM_FAVORITES,\r\n            data: {\r\n                currentWeather,\r\n                dailyWeather\r\n            }\r\n        });\r\n\r\n    }\r\n}\r\n\r\n\r\nexport function errorOn(text) {\r\n    \r\n    return dispatch => {\r\n        dispatch({\r\n            type: ERROR_DISPALY_ON,\r\n            text\r\n        });\r\n        setTimeout(()=>{\r\n            dispatch(errorOff());\r\n        },2000)\r\n    }\r\n}\r\n\r\nexport function errorOff() {\r\n    return {\r\n        type: ERROR_DISPALY_OFF\r\n\r\n    }\r\n}","import { DEFAULT_LOAD_WEATHER, DAILY_FORECASTS, CHANGE_UNIT_DEGREES, CURRENT_WEATHER_FROM_FAVORITES } from \"./types\";\r\nimport uniqid from 'uniqid';\r\n\r\nconst intialState = {\r\n    weather: [],\r\n    weatherDaily: [],\r\n    unitDegrees:\"C\"\r\n}\r\n\r\nexport const mainCardReducer = (state = intialState, action) => {\r\n    switch (action.type) {\r\n\r\n        case DEFAULT_LOAD_WEATHER:\r\n            const currentWeather = action.data.map(res => {\r\n\r\n                return {\r\n                    weatherText: res.WeatherText,\r\n                    weatherIcon: res.WeatherIcon,\r\n                    celsius: res.Temperature.Metric.Value,\r\n                    fahrenheit: res.Temperature.Imperial.Value,\r\n                    date: res.LocalObservationDateTime\r\n                }\r\n            })\r\n\r\n            return {\r\n                ...state,\r\n                weather: currentWeather\r\n            }\r\n        case DAILY_FORECASTS:\r\n            const newDailyForecasts = action.data.DailyForecasts.map(res => {\r\n\r\n                const fahMinValue = res.Temperature.Minimum.Value;\r\n                const fahMaxValue = res.Temperature.Maximum.Value;\r\n                const celMinValue = fToC(fahMinValue);\r\n                const celMaxValue = fToC(fahMaxValue);\r\n                /*** Day and Night objects have *** \r\n                 * \"Day\": {\r\n                \"Icon\": 6,\r\n                \"IconPhrase\": \"Mostly cloudy\",\r\n                \"HasPrecipitation\": false\r\n       \r\n                 */\r\n                return {\r\n                    weatherDay: res.Day,\r\n                    weatherNight: res.Night,\r\n                    // weatherIconDay: res.WeatherIcon,\r\n                    celsiusMin: celMinValue,\r\n                    celsiusMax: celMaxValue,\r\n                    fahrenheitMin: fahMinValue,\r\n                    fahrenheitMax: fahMaxValue,\r\n                    date: res.Date,\r\n                    dayId:uniqid()\r\n\r\n                }\r\n            })\r\n            return {\r\n                ...state,\r\n                weatherDaily:newDailyForecasts\r\n            }\r\n\r\n        case CHANGE_UNIT_DEGREES:\r\n                return {\r\n                    ...state,\r\n                    unitDegrees:action.unit\r\n                }\r\n        case CURRENT_WEATHER_FROM_FAVORITES:\r\n            return {\r\n                ...state,\r\n                weatherDaily:action.data.weatherDaily,\r\n                weather:action.data.currentWeather\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nfunction round(num) {\r\n    const m = Number((Math.abs(num) * 100).toPrecision(15));\r\n    return Math.round(m) / 100 * Math.sign(num);\r\n}\r\nfunction fToC(fahrenheit) {\r\n    const celsius = (fahrenheit - 32) * 5 / 9;\r\n    return round(celsius);\r\n}\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Col, Container, Row, Button } from 'react-bootstrap';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { defaultLoadWeathr, changeUnitDegrees, addToFavorites } from '../../redux/actions';\r\nimport { FaExchangeAlt } from  'react-icons/fa';\r\nimport './MainCardComponent.css'\r\nimport { mainCardReducer } from '../../redux/mainCradReducer';\r\n\r\nfunction MainCardComponent({ city }) {\r\n\r\n\r\n    const [unit, setUnit] = useState(\"celsius\");\r\n\r\n    const weather = useSelector(state => {\r\n        const { mainCardReducer } = state;\r\n        return mainCardReducer.weather;\r\n    })\r\n    const cityData = useSelector(state => {\r\n        const { homePageReducer } = state;\r\n        return homePageReducer;\r\n    })\r\n    const dailyWeather = useSelector(state => {\r\n        const { mainCardReducer } = state;\r\n        return mainCardReducer.weatherDaily;\r\n    });\r\n \r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(defaultLoadWeathr(cityData.cityKey));\r\n    }, [cityData.cityKey]);\r\n\r\n    const icon = () => {\r\n        const iconId = Number(weather[0].weatherIcon) < 10 ? `0${weather[0].weatherIcon}` : weather[0].weatherIcon;\r\n        return `https://developer.accuweather.com/sites/default/files/${iconId}-s.png`\r\n    }\r\n    const getDate = () => {\r\n        // const date = new Date(weather[0].date.replace(/\\T.*/, \"\"));\r\n        const date = new Date(weather[0].date);\r\n        return date.toDateString();\r\n    }\r\n\r\n    const changeTemperatureUnit = () => {\r\n        if (unit === \"celsius\") {\r\n            setUnit(\"fahrenheit\");\r\n            dispatch(changeUnitDegrees(\"F\"));\r\n        }\r\n        else {\r\n            setUnit(\"celsius\");\r\n            dispatch(changeUnitDegrees(\"C\"));\r\n        }\r\n    }\r\n\r\n\r\n    const onSave = () =>{\r\n       \r\n        dispatch(addToFavorites(cityData.text,cityData.cityKey ,weather , dailyWeather) );\r\n    }\r\n\r\n    return (\r\n\r\n        <div className=\"c-main-card\">\r\n            {!!weather.length && <Container fluid=\"md\">\r\n                <Row>\r\n                    <Col >\r\n                        <h1 className=\"current-date\">{cityData.text}</h1>\r\n                        <h1 className=\"current-date\">{getDate()}</h1>\r\n                    </Col>\r\n                    <Col>\r\n                        <div className=\"favorites-container\">\r\n                            <div className=\"btn-favorites\" onClick={onSave}><h5>♥ save</h5></div>\r\n                            <div className=\"btn-favorites\" onClick={changeTemperatureUnit}><h5>C <FaExchangeAlt/> F</h5></div>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"align-items-center\">\r\n                    <Col>\r\n                        <div className=\"container-weather-img\">\r\n                            <img className=\"weather-img\" src={icon()} />\r\n                        </div>\r\n                    </Col>\r\n                    <Col>\r\n                        {\r\n                            unit === \"celsius\" ?\r\n                                <h1 className=\"weather-temperature\">{weather[0][unit]}&deg;C</h1> :\r\n                                <h1 className=\"weather-temperature\">{weather[0][unit]}&deg;F</h1>\r\n                        }\r\n                        <h1 className=\"weather-text\">{weather[0].weatherText}</h1>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n            }\r\n        </div>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default MainCardComponent;","\r\nimport { useEffect, useState } from 'react';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport './WeatherSingleCard.css';\r\n\r\n\r\nfunction WeatherSingleCard({ weather,unitDegrees }) {\r\n    const { weatherDay,\r\n        weatherNight,\r\n        celsiusMin,\r\n        celsiusMax,\r\n        fahrenheitMin, \r\n        fahrenheitMax,\r\n        date } = weather;\r\n\r\n   \r\n\r\n    const [isDay, setIsDay] = useState(\"weatherDay\");\r\n\r\n    useEffect(() => {\r\n        const date = new Date();\r\n        if ((date.getHours() >= 17)||(date.getHours()<=5) ){\r\n            setIsDay(\"weatherNight\");\r\n        }\r\n\r\n    }, []);\r\n\r\n    const icon = () => {\r\n        const accuWeatherIcons = \"https://developer.accuweather.com/sites/default/files/\"\r\n            const iconId = Number(weather[isDay].Icon) < 10 ? `0${weather[isDay].Icon}` : weather[isDay].Icon;\r\n            return `${accuWeatherIcons}${iconId}-s.png`;\r\n    }\r\n    \r\n    const weatherText = () => {\r\n        const text = weather[isDay].IconPhrase;\r\n        return text.replace(\"w/\",'');\r\n    }\r\n\r\n    const getDate = () => {\r\n        const day = new Date(date);\r\n        return day.toDateString();\r\n    }\r\n    \r\n    const temperature  = () =>  unitDegrees === \"C\"?<h1> {celsiusMin}&deg;C~{celsiusMax}&deg;C</h1> : <h1> {fahrenheitMin}&deg;F~{fahrenheitMax}&deg;F</h1>  \r\n    \r\n    return (\r\n            <Container fluid className=\"c-weather-single-card back-ground-color\">\r\n                <Row >\r\n                    <Col >\r\n                        <div className=\"single-day-container\">\r\n                            <h1>\r\n                            {getDate()}\r\n                            </h1>\r\n                             <div className=\"container-weather-img\">\r\n                                <img className=\"single-weather-img\" src={icon()} />\r\n                            </div> \r\n                            {temperature()}\r\n                            <h1>\r\n                            {weatherText()}\r\n                            </h1>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n       \r\n    );\r\n}\r\n\r\nexport default WeatherSingleCard;","import React, { useEffect, useState } from 'react';\r\nimport { Col, Container, Row, Toast } from 'react-bootstrap';\r\nimport './HomePage.css'\r\nimport { GoLocation } from 'react-icons/go'\r\nimport MainCardComponent from '../../components/MainCardComponent/MainCardComponent';\r\nimport WeatherSingleCard from '../../components/WeatherSingleCard/WeatherSingleCard';\r\nimport { currentGeopostion, autoComplete, dailyForecasts } from '../../redux/actions';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\n\r\n\r\nfunction HomePage(props) {\r\n    // const [lng, setLng] = useState(0);\r\n    // const [lat, setLat] = useState(0);\r\n\r\n    const [textCity, setTextCity] = useState(\"\");\r\n\r\n    const dispatch = useDispatch();\r\n    const city = useSelector(state => {\r\n\r\n        const { homePageReducer } = state;\r\n        return homePageReducer;\r\n    });\r\n\r\n\r\n\r\n\r\n\r\n    const weatherDaily = useSelector(state => {\r\n        const { mainCardReducer } = state;\r\n        return mainCardReducer.weatherDaily;\r\n    })\r\n    const unitDegrees = useSelector(state => {\r\n        const { mainCardReducer } = state;\r\n        return mainCardReducer.unitDegrees;\r\n    })\r\n\r\n\r\n\r\n    const handleGetLocation = () => {\r\n        dispatch(currentGeopostion());\r\n    }\r\n\r\n\r\n    const handleChange = (e) => {\r\n        setTextCity(e.target.value);\r\n    }\r\n\r\n\r\n\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        dispatch(autoComplete(textCity))\r\n        setTextCity(\"\");\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(dailyForecasts(city.cityKey))\r\n    }, [city.cityKey])\r\n\r\n    const error = useSelector(state => state.appReducer.error);\r\n    console.log(\"error \", error);\r\n\r\n    const errorToast = <Toast className=\"d-inline-block m-1\" bg=\"danger\" >\r\n        {/* <Toast.Header>\r\n            <img src=\"holder.js/20x20?text=%20\" className=\"rounded me-2\" alt=\"\" />\r\n            <strong className=\"me-auto\">Error</strong>\r\n        </Toast.Header> */}\r\n        <Toast.Body >\r\n            {error}\r\n        </Toast.Body>\r\n    </Toast>\r\n\r\n\r\n    return (\r\n        <div className=\"p-home\">\r\n            {!!error && errorToast}\r\n            <Container fluid>\r\n                <Row className=\"justify-content-center\" >\r\n                    <Col md=\"auto\">\r\n                        <form onSubmit={handleSubmit}>\r\n                            <div className=\"frame-input\">\r\n                                <input className=\"search-input\" type=\"text\" placeholder=\"The city name\" onChange={handleChange} value={textCity} />\r\n\r\n                            </div>\r\n                            <input type=\"submit\" hidden />\r\n                        </form>\r\n                    </Col>\r\n\r\n                </Row>\r\n                <Row >\r\n                    <MainCardComponent city={city.text} />\r\n                </Row>\r\n\r\n                <div className=\"back-ground-color\">\r\n                    <Row xs={1} md={3} xxl={5}>\r\n\r\n                        {!!weatherDaily && weatherDaily.map(res => {\r\n                            return <Col key={res.dayId}> <WeatherSingleCard weather={res} unitDegrees={unitDegrees} /> </Col>\r\n                        })\r\n\r\n                        }\r\n                    </Row>\r\n                </div>\r\n\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HomePage;","\r\nimport React from 'react';\r\nimport './CityWeatherCard.css'\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport { useDispatch } from 'react-redux';\r\n// import { Redirect } from 'react-router';\r\nimport { weatherFromFavorites } from '../../redux/actions'\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction CityWeatherCard({ cityData }) {\r\n    /**\r\n   *  data: {\r\n              city,\r\n              currentWeather,\r\n              dailyWeather\r\n          }\r\n   */\r\n\r\n   \r\n    const dispatch = useDispatch();\r\n    const { currentWeather, dailyWeather, city, cityKey } = cityData;\r\n    const history = useHistory();\r\n\r\n    const clickOnCard = () => {\r\n        dispatch(weatherFromFavorites(city, cityKey, currentWeather, dailyWeather));\r\n        // window.location.href=\"#/\"\r\n        history.push(\"/#\")\r\n    }\r\n\r\n    const icon = () => {\r\n        const iconId = Number(currentWeather[0].weatherIcon) < 10 ? `0${currentWeather[0].weatherIcon}` : currentWeather[0].weatherIcon;\r\n        return `https://developer.accuweather.com/sites/default/files/${iconId}-s.png`\r\n    }\r\n\r\n\r\n\r\n    return (\r\n\r\n        <Container fluid className=\"c-weather-single-card back-ground-color\" onClick={clickOnCard}>\r\n\r\n            <Row >\r\n                <Col >\r\n                    <div className=\"single-day-container\">\r\n                        <h1 className=\"city-color\">\r\n                            {city}\r\n                        </h1>\r\n                        <div className=\"container-weather-img\">\r\n                            <img className=\"single-weather-img\" src={icon()} />\r\n                        </div>\r\n                        <h1>\r\n                            {currentWeather[0].celsius}&deg;C\r\n                        </h1>\r\n                        <h1>\r\n                            {currentWeather[0].weatherText}\r\n                        </h1>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n\r\n        </Container>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default CityWeatherCard;","import React from 'react';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport { useSelector } from 'react-redux';\r\nimport CityWeatherCard from '../../components/CityWeatherCard/CityWeatherCard';\r\nimport './FavoritesPage.css'\r\n\r\nfunction FavoritesPage(props) {\r\n\r\n    const cities = useSelector((state) => {\r\n        const { favoritesPageReducer } = state;\r\n        return favoritesPageReducer.citiesForecasts;\r\n    })\r\n\r\n    const citiesCards = cities.map(res => {\r\n        return <Col key={res.cityKey} > <CityWeatherCard cityData={res} /> </Col>\r\n    })\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"p-favorites\">\r\n            <Container fluid className=\"back-ground-color\">\r\n                <Row xs={1} md={3} xxl={5}>\r\n                    {\r\n                        citiesCards.length ? citiesCards :\r\n                            <Col><h1>The list emty yet. </h1></Col>\r\n                    }\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FavoritesPage;","import React from 'react';\r\nimport { Container, Nav, Navbar } from 'react-bootstrap';\r\n\r\nfunction WeatherNavBar(props) {\r\n    return (\r\n        <div>\r\n            <Navbar bg=\"light\" variant=\"light\">\r\n                <Container>\r\n                    <Navbar.Brand href=\"#/\">Weather App</Navbar.Brand>\r\n                    <Nav className=\"me-auto\">\r\n                        <Nav.Link href=\"#/\">Home</Nav.Link>\r\n                        <Nav.Link href=\"#/Favorite\">Favorite</Nav.Link>\r\n                    </Nav>\r\n                </Container>\r\n            </Navbar>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WeatherNavBar;","import './App.css';\nimport HomePage from './pages/HomePage/HomePage';\nimport FavoritesPage from './pages/FavoritesPage/FavoritesPage';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport WeatherNavBar from './components/WeatherNavBar/WeatherNavBar';\nimport { useSelector } from 'react-redux';\n\n\nfunction App() {\n\n  // const error = useSelector(state => state.appReducer.error);\n\n  return (\n    <div className=\"App\">\n      <WeatherNavBar />\n      <HashRouter>\n        <Switch>\n          <Route exact path=\"/\">\n            <HomePage />\n          </Route>\n          <Route exact path=\"/favorite\">\n            <FavoritesPage />\n          </Route>\n        </Switch>\n      </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { GET_CURRENT_LOCATION, UPDATE_CITY_NAME, AUTO_COMPLETE } from \"./types\";\r\n\r\nconst intialState = {\r\n    // location: {\r\n    longitude: 34.855499,\r\n    latitude: 32.109333,\r\n    // },\r\n    text: \"Tel Aviv\",\r\n    cityKey: \"215854\"\r\n}\r\n\r\nexport const homePageReducer = (state = intialState, action) => {\r\n\r\n    switch (action.type) {\r\n\r\n        case UPDATE_CITY_NAME:\r\n            return {\r\n                ...state,\r\n                text: action.data.city,\r\n                // cityKey:action.data.cityKey\r\n\r\n            }\r\n        // case GET_CURRENT_LOCATION:\r\n        //         const gCity = action.data.LocalizedName;\r\n        //         const gCityKey = action.data.Key\r\n        //     return {\r\n        //         ...state,\r\n        //         text:gCity,\r\n        //         cityKey:gCityKey\r\n        //     }\r\n\r\n        case GET_CURRENT_LOCATION:\r\n            // const gLongitude = action.data.location.longitude;\r\n            // const gLatitude = action.data.location.latitude;\r\n            return {\r\n                ...state,\r\n                longitude: action.data.location.longitude,\r\n                latitude: action.data.location.latitude\r\n            }\r\n        case AUTO_COMPLETE:\r\n            const newCity = action.data[0].LocalizedName;\r\n            const newCityKey = action.data[0].Key;\r\n            return {\r\n                ...state,\r\n                text: newCity,\r\n                cityKey: newCityKey\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}","import { ADD_TO_FAVORITES } from './types';\r\n\r\nconst intialState = {\r\n    citiesForecasts: []\r\n\r\n};\r\n/**\r\n *  data: {\r\n            city,\r\n            currentWeather,\r\n            dailyWeather\r\n        }\r\n */\r\nexport const favoritesPageReducer = (state = intialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case ADD_TO_FAVORITES:\r\n\r\n            const { data } = action;\r\n            const { citiesForecasts } = state;\r\n            const itemIndex = citiesForecasts.findIndex(res => res.cityKey === data.cityKey);\r\n            const nextCitiesForecasts = [...citiesForecasts];\r\n            if (itemIndex > -1) {\r\n                nextCitiesForecasts.splice(itemIndex, 1, data);\r\n            }\r\n            else {\r\n                nextCitiesForecasts.push(data);\r\n            }\r\n          \r\n\r\n            return {\r\n                ...state,\r\n                citiesForecasts: nextCitiesForecasts\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\n","import {\r\n    ERROR_DISPALY_ON,\r\n    ERROR_DISPALY_OFF\r\n} from \"./types\";\r\n\r\nconst initialState = {\r\n    loading: false,\r\n    error: null\r\n}\r\n\r\nexport const appReducer = (state = initialState, action) => {\r\n       console.log('input text Reducer > ',action);\r\n    switch (action.type) {\r\n\r\n        case ERROR_DISPALY_ON:\r\n            return {\r\n                ...state,\r\n                error: action.text\r\n            }\r\n        case ERROR_DISPALY_OFF:\r\n            return {\r\n                ...state,\r\n                error: null\r\n            }\r\n\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers } from \"redux\";\r\nimport { homePageReducer } from \"./homePageReducer\";\r\nimport { mainCardReducer } from \"./mainCradReducer\";\r\nimport { favoritesPageReducer } from \"./favoritesPageReducer\";\r\nimport { appReducer } from \"./appReducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    homePageReducer,\r\n    mainCardReducer,\r\n    favoritesPageReducer,\r\n    appReducer\r\n\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport { rootReducer } from './redux/rootReducer';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\n\n\nconst store = createStore(rootReducer, compose(\n  applyMiddleware(\n    thunk\n  ),\n  typeof window.__REDUX_DEVTOOLS_EXTENSION__ === \"undefined\"\n    ? a => a\n    : window.__REDUX_DEVTOOLS_EXTENSION__ &&\n    window.__REDUX_DEVTOOLS_EXTENSION__()\n));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}