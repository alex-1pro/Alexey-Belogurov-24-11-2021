{"version":3,"sources":["shared/accWeatherApi.js","redux/types.js","redux/actions.js","redux/mainCradReducer.js","components/MainCardComponent/MainCardComponent.jsx","components/WeatherSingleCard/WeatherSingleCard.jsx","pages/HomePage/HomePage.jsx","components/CityWeatherCard/CityWeatherCard.jsx","pages/FavoritesPage/FavoritesPage.jsx","components/WeatherNavBar/WeatherNavBar.jsx","App.js","reportWebVitals.js","redux/homePageReducer.js","redux/favoritesPageReducer.js","redux/rootReducer.js","index.js"],"names":["API_KEY","CURRENT_WEATHER_URI","DAILY_FORECASTS_URI","DEFAULT_LOAD_WEATHER","AUTO_COMPLETE","DAILY_FORECASTS","GET_CURRENT_LOCATION","CHANGE_UNIT_DEGREES","ADD_TO_FAVORITES","UPDATE_CITY_NAME","CURRENT_WEATHER_FROM_FAVORITES","changeUnitDegrees","unit","type","intialState","weather","weatherDaily","unitDegrees","fToC","fahrenheit","num","m","Number","Math","abs","toPrecision","round","sign","MainCardComponent","city","useState","setUnit","useSelector","state","mainCardReducer","cityData","homePageReducer","dailyWeather","dispatch","useDispatch","useEffect","cityKey","a","fetch","response","json","jsonData","console","log","data","defaultLoadWeathr","className","length","Container","fluid","Row","Col","text","Date","date","toDateString","onClick","currentWeather","addToFavorites","src","iconId","weatherIcon","icon","weatherText","WeatherSingleCard","celsiusMin","weatherDay","weatherNight","celsiusMax","fahrenheitMin","fahrenheitMax","isDay","setIsDay","getHours","Icon","IconPhrase","replace","HomePage","props","textCity","setTextCity","dailyForecasts","md","onSubmit","e","preventDefault","CITY_URI","autoComplete","placeholder","onChange","target","value","hidden","xs","xxl","map","res","dayId","CityWeatherCard","history","useHistory","weatherFromFavorites","push","celsius","FavoritesPage","citiesCards","favoritesPageReducer","citiesForecasts","WeatherNavBar","Navbar","bg","variant","Brand","href","Nav","Link","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","longitude","latitude","rootReducer","combineReducers","action","location","newCity","LocalizedName","newCityKey","Key","WeatherText","WeatherIcon","Temperature","Metric","Value","Imperial","LocalObservationDateTime","newDailyForecasts","DailyForecasts","fahMinValue","Minimum","fahMaxValue","Maximum","celMinValue","celMaxValue","Day","Night","uniqid","itemIndex","findIndex","nextCitiesForecasts","splice","store","createStore","compose","applyMiddleware","thunk","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"saACaA,EAAU,mCACVC,EAAsB,4DAEtBC,EAAsB,+DCFtBC,EAAuB,uBACvBC,EAAgB,gBAChBC,EAAkB,kBAGlBC,EAAuB,uBAIvBC,EAAsB,sBACtBC,EAAmB,mBACnBC,EAAmB,mBACnBC,EAAiC,iCCiIvC,SAASC,EAAkBC,GAC9B,MAAO,CACHC,KAAMN,EACNK,KAAMA,G,4CC/IRE,EAAc,CAChBC,QAAS,GACTC,aAAc,GACdC,YAAY,KA2EhB,SAASC,EAAKC,GAEV,OANJ,SAAeC,GACX,IAAMC,EAAIC,QAAwB,IAAhBC,KAAKC,IAAIJ,IAAYK,YAAY,KACnD,OAAOF,KAAKG,MAAML,GAAK,IAAME,KAAKI,KAAKP,GAIhCM,CAD6B,GAAnBP,EAAa,IAAU,G,WCkB7BS,MA5Ff,YAAqC,EAARC,KAAS,IAGlC,EAAwBC,mBAAS,WAAjC,mBAAOlB,EAAP,KAAamB,EAAb,KAEMhB,EAAUiB,aAAY,SAAAC,GAExB,OAD4BA,EAApBC,gBACenB,WAErBoB,EAAWH,aAAY,SAAAC,GAEzB,OAD4BA,EAApBG,mBAGNC,EAAeL,aAAY,SAAAC,GAE7B,OAD4BA,EAApBC,gBACelB,gBAIrBsB,EAAWC,cAkCjB,OAhCAC,qBAAU,WACNF,EFiED,WAAgD,IAArBG,EAAoB,uDAAV,SACxC,8CAAO,WAAMH,GAAN,iBAAAI,EAAA,+EAEwBC,MAAM1C,EAAsBwC,EAAU,WAAazC,GAF3E,cAEO4C,EAFP,gBAGwBA,EAASC,OAHjC,OAGOC,EAHP,OAICC,QAAQC,IAAI,uBACZV,EAAS,CACLzB,KAAMV,EACN8C,KAAMH,IAPX,kDAUCC,QAAQC,IAAI,4BAA6B,KAAInC,MAV9C,0DAAP,sDElEaqC,CAAkBf,EAASM,YACrC,CAACN,EAASM,UAgCT,qBAAKU,UAAU,cAAf,WACOpC,EAAQqC,QAAU,eAACC,EAAA,EAAD,CAAWC,MAAM,KAAjB,UACjB,eAACC,EAAA,EAAD,WACI,eAACC,EAAA,EAAD,WACI,oBAAIL,UAAU,eAAd,SAA8BhB,EAASsB,OACvC,oBAAIN,UAAU,eAAd,SA7BH,IAAIO,KAAK3C,EAAQ,GAAG4C,MACrBC,oBA8BA,cAACJ,EAAA,EAAD,UACI,sBAAKL,UAAU,sBAAf,UACI,qBAAKA,UAAU,gBAAgBU,QAhBxC,WACXd,QAAQC,IAAI,UACZV,EF4FD,SAAwBT,EAAMY,EAASqB,EAAgBzB,GAC1D,MAAO,CACHxB,KAAML,EACNyC,KAAM,CACFpB,OACAY,UACAqB,iBACAzB,iBEnGK0B,CAAe5B,EAASsB,KAAKtB,EAASM,QAAS1B,EAAUsB,KAc9C,SAAgD,+CAChD,qBAAKc,UAAU,gBAAgBU,QA9BzB,WACb,YAATjD,GACAmB,EAAQ,cACRO,EAAS3B,EAAkB,QAG3BoB,EAAQ,WACRO,EAAS3B,EAAkB,QAuBX,SAA+D,oCAAM,cAAC,IAAD,IAAN,kBAI3E,eAAC4C,EAAA,EAAD,CAAKJ,UAAU,qBAAf,UACI,cAACK,EAAA,EAAD,UACI,qBAAKL,UAAU,wBAAf,SACI,qBAAKA,UAAU,cAAca,IA/CxC,WACT,IAAMC,EAAS3C,OAAOP,EAAQ,GAAGmD,aAAe,GAAjC,WAA0CnD,EAAQ,GAAGmD,aAAgBnD,EAAQ,GAAGmD,YAC/F,MAAM,yDAAN,OAAgED,EAAhE,UA6CsDE,SAG1C,eAACX,EAAA,EAAD,WAEiB,YAAT5C,EACI,qBAAIuC,UAAU,sBAAd,UAAqCpC,EAAQ,GAAGH,GAAhD,WACA,qBAAIuC,UAAU,sBAAd,UAAqCpC,EAAQ,GAAGH,GAAhD,WAER,oBAAIuC,UAAU,eAAd,SAA8BpC,EAAQ,GAAGqD,0B,MCrBlDC,MA9Df,YAAqD,IAAxBtD,EAAuB,EAAvBA,QAAQE,EAAe,EAAfA,YAG7BqD,GAISvD,EANLwD,WAMKxD,EALTyD,aAKSzD,EAJTuD,YACAG,EAGS1D,EAHT0D,WACAC,EAES3D,EAFT2D,cACAC,EACS5D,EADT4D,cACAhB,EAAS5C,EAAT4C,KAIJ,EAA0B7B,mBAAS,cAAnC,mBAAO8C,EAAP,KAAcC,EAAd,KA4BA,OA1BArC,qBAAU,WACN,IAAMmB,EAAO,IAAID,MACZC,EAAKmB,YAAc,IAAMnB,EAAKmB,YAAY,IAC3CD,EAAS,kBAGd,IAqBK,cAACxB,EAAA,EAAD,CAAWC,OAAK,EAACH,UAAU,0CAA3B,SACI,cAACI,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,UACI,sBAAKL,UAAU,uBAAf,UACI,6BAXR,IAAIO,KAAKC,GACVC,iBAaU,qBAAKT,UAAU,wBAAf,SACG,qBAAKA,UAAU,qBAAqBa,IA3BnD,WACT,IACUC,EAAS3C,OAAOP,EAAQ6D,GAAOG,MAAQ,GAA9B,WAAuChE,EAAQ6D,GAAOG,MAAShE,EAAQ6D,GAAOG,KAC7F,MAAM,GAAN,OAFqB,0DAErB,OAA6Bd,EAA7B,UAwB6DE,OAXzB,MAAhBlD,EAAoB,mCAAMqD,EAAN,SAAyBG,EAAzB,WAAkD,mCAAMC,EAAN,SAA4BC,EAA5B,WAc1E,6BAvBP5D,EAAQ6D,GAAOI,WAChBC,QAAQ,KAAK,gBC6ElBC,MArGf,SAAkBC,GAId,MAAgCrD,mBAAS,IAAzC,mBAAOsD,EAAP,KAAiBC,EAAjB,KAEM/C,EAAWC,cACXV,EAAOG,aAAY,SAAAC,GAGrB,OAD4BA,EAApBG,mBAcNpB,EAAegB,aAAY,SAAAC,GAE7B,OAD4BA,EAApBC,gBACelB,gBAErBC,EAAce,aAAY,SAAAC,GAE5B,OAD4BA,EAApBC,gBACejB,eAiC3B,OA/BA8B,QAAQC,IAAI,oBAAqB/B,GA2BjCuB,qBAAU,WACNF,EJyDD,WAA6C,IAArBG,EAAoB,uDAAV,SACrC,8CAAO,WAAMH,GAAN,iBAAAI,EAAA,+EAEwBC,MAAMzC,EAAsBuC,EAAU,WAAazC,GAF3E,cAEO4C,EAFP,gBAGwBA,EAASC,OAHjC,OAGOC,EAHP,OAKCR,EAAS,CACLzB,KAAMR,EACN4C,KAAMH,IAPX,kDAUCC,QAAQC,IAAI,4BAA6B,KAAInC,MAV9C,0DAAP,sDI1DayE,CAAezD,EAAKY,YAC9B,CAACZ,EAAKY,UAGL,qBAAKU,UAAU,SAAf,SACI,eAACE,EAAA,EAAD,CAAWC,OAAK,EAAhB,UAEI,cAACC,EAAA,EAAD,CAAKJ,UAAU,yBAAf,SACI,cAACK,EAAA,EAAD,CAAK+B,GAAG,OAAR,SACI,uBAAMC,SAjBL,SAACC,GAClBA,EAAEC,iBAEFpD,EJ8CD,SAAsBT,GACzB,8CAAO,WAAMS,GAAN,iBAAAI,EAAA,+EAEwBC,MAAMgD,+EAAuB3F,EAAU,MAAQ6B,GAFvE,cAEOe,EAFP,gBAGwBA,EAASC,OAHjC,OAGOC,EAHP,OAICR,EAAS,CACLzB,KAAMT,EACN6C,KAAMH,IANX,kDAUCC,QAAQC,IAAI,4BAA6B,KAAInC,MAV9C,0DAAP,sDI/Ca+E,CAAaR,IACtBC,EAAY,KAaI,UACI,qBAAKlC,UAAU,cAAf,SACI,uBAAOA,UAAU,eAAetC,KAAK,OAAOgF,YAAY,gBAAgBC,SA5B/E,SAACL,GAGlBJ,EAAYI,EAAEM,OAAOC,QAyBmGA,MAAOZ,MAI3G,uBAAOvE,KAAK,SAASoF,QAAM,WAOvC,cAAC1C,EAAA,EAAD,UACI,cAAC,EAAD,CAAmB1B,KAAMA,EAAK4B,SAGlC,qBAAKN,UAAU,oBAAf,SACI,cAACI,EAAA,EAAD,CAAK2C,GAAI,EAAGX,GAAI,EAAGY,IAAK,EAAxB,WAEOnF,GAAgBA,EAAaoF,KAAI,SAAAC,GAChC,OAAO,eAAC7C,EAAA,EAAD,eAAsB,cAAC,EAAD,CAAmBzC,QAASsF,EAAKpF,YAAaA,IAApE,MAAUoF,EAAIC,oB,eCnClCC,MAxDf,YAAwC,IAAbpE,EAAY,EAAZA,SAUjBG,EAAWC,cACTuB,EAAgD3B,EAAhD2B,eAAgBzB,EAAgCF,EAAhCE,aAAcR,EAAkBM,EAAlBN,KAAMY,EAAYN,EAAZM,QACtC+D,EAAUC,cAehB,OAEI,cAACpD,EAAA,EAAD,CAAWC,OAAK,EAACH,UAAU,0CAA0CU,QAfrD,WAChBvB,EL2ID,SAA8BT,EAAMY,EAASqB,EAAgBzB,GAChE,OAAO,SAAAC,GACHA,EAAS,CACLzB,KAAMJ,EACNwC,KAAM,CACFpB,OACAY,aAGRH,EAAS,CACLzB,KAAMH,EACNuC,KAAM,CACFa,iBACAzB,mBKxJCqE,CAAqB7E,EAAMY,EAASqB,EAAgBzB,IAE7DmE,EAAQG,KAAK,OAYb,SAEI,cAACpD,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,UACI,sBAAKL,UAAU,uBAAf,UACI,oBAAIA,UAAU,aAAd,SACKtB,IAEL,qBAAKsB,UAAU,wBAAf,SACI,qBAAKA,UAAU,qBAAqBa,IAlB/C,WACT,IAAMC,EAAS3C,OAAOwC,EAAe,GAAGI,aAAe,GAAxC,WAAiDJ,EAAe,GAAGI,aAAgBJ,EAAe,GAAGI,YACpH,MAAM,yDAAN,OAAgED,EAAhE,UAgB6DE,OAE7C,+BACKL,EAAe,GAAG8C,QADvB,WAGA,6BACK9C,EAAe,GAAGM,wB,MChBhCyC,MA3Bf,SAAuB1B,GAInB,IAKM2B,EALS9E,aAAY,SAACC,GAExB,OADiCA,EAAzB8E,qBACoBC,mBAGLZ,KAAI,SAAAC,GAC3B,OAAO,eAAC7C,EAAA,EAAD,eAAyB,cAAC,EAAD,CAAiBrB,SAAUkE,IAApD,MAAUA,EAAI5D,YAKzB,OACI,qBAAKU,UAAU,cAAf,SACI,cAACE,EAAA,EAAD,CAAWC,OAAK,EAAEH,UAAU,oBAA5B,SACI,cAACI,EAAA,EAAD,CAAK2C,GAAI,EAAGX,GAAI,EAAGY,IAAK,EAAxB,SACKW,EAAY1D,OAAQ0D,EACrB,cAACtD,EAAA,EAAD,UAAK,8D,wBCXVyD,MAhBf,SAAuB9B,GACnB,OACI,8BACI,cAAC+B,EAAA,EAAD,CAAQC,GAAG,QAAQC,QAAQ,QAA3B,SACI,eAAC/D,EAAA,EAAD,WACI,cAAC6D,EAAA,EAAOG,MAAR,CAAcC,KAAK,KAAnB,yBACA,eAACC,EAAA,EAAD,CAAKpE,UAAU,UAAf,UACI,cAACoE,EAAA,EAAIC,KAAL,CAAUF,KAAK,KAAf,kBACA,cAACC,EAAA,EAAIC,KAAL,CAAUF,KAAK,aAAf,iCCcTG,MAlBf,WACE,OACE,sBAAKtE,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOuE,OAAK,EAACC,KAAK,IAAlB,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,YAAlB,SACA,cAAC,EAAD,eCLKC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,gBCLR/G,EAAc,CAEhBuH,UAAW,UACXC,SAAU,UAEV7E,KAAM,WACNhB,QAAS,U,QCNP3B,EAAc,CAChBkG,gBAAiB,ICERuB,EAAcC,YAAgB,CACvCpG,gBFK2B,WAAkC,IAAjCH,EAAgC,uDAAxBnB,EAAa2H,EAAW,uCAG5D,OAFA1F,QAAQC,IAAI,wBAAyByF,GAE7BA,EAAO5H,MAEX,KAAKJ,EACD,OAAO,2BACAwB,GADP,IAEIwB,KAAMgF,EAAOxF,KAAKpB,OAa1B,KAAKvB,EAGD,OAAO,2BACA2B,GADP,IAEIoG,UAAWI,EAAOxF,KAAKyF,SAASL,UAChCC,SAAUG,EAAOxF,KAAKyF,SAASJ,WAEvC,KAAKlI,EACD,IAAMuI,EAAUF,EAAOxF,KAAK,GAAG2F,cACzBC,EAAaJ,EAAOxF,KAAK,GAAG6F,IAClC,OAAO,2BACA7G,GADP,IAEIwB,KAAMkF,EACNlG,QAASoG,IAGjB,QACI,OAAO5G,IE3CfC,gBXE2B,WAAkC,IAAjCD,EAAgC,uDAAxBnB,EAAa2H,EAAW,uCAE5D,OADA1F,QAAQC,IAAI,sBAAuByF,GAC3BA,EAAO5H,MAEX,KAAKV,EACD,IAAM2D,EAAiB2E,EAAOxF,KAAKmD,KAAI,SAAAC,GAEnC,MAAO,CACHjC,YAAaiC,EAAI0C,YACjB7E,YAAamC,EAAI2C,YACjBpC,QAASP,EAAI4C,YAAYC,OAAOC,MAChChI,WAAYkF,EAAI4C,YAAYG,SAASD,MACrCxF,KAAM0C,EAAIgD,6BAIlB,OAAO,2BACApH,GADP,IAEIlB,QAAS+C,IAEjB,KAAKzD,EACD,IAAMiJ,EAAoBb,EAAOxF,KAAKsG,eAAenD,KAAI,SAAAC,GAErD,IAAMmD,EAAcnD,EAAI4C,YAAYQ,QAAQN,MACtCO,EAAcrD,EAAI4C,YAAYU,QAAQR,MACtCS,EAAc1I,EAAKsI,GACnBK,EAAc3I,EAAKwI,GAQzB,MAAO,CACHnF,WAAY8B,EAAIyD,IAChBtF,aAAc6B,EAAI0D,MAElBzF,WAAYsF,EACZnF,WAAYoF,EACZnF,cAAe8E,EACf7E,cAAe+E,EACf/F,KAAM0C,EAAI3C,KACV4C,MAAM0D,UAId,OAAO,2BACA/H,GADP,IAEIjB,aAAasI,IAGrB,KAAK/I,EACG,OAAO,2BACA0B,GADP,IAEIhB,YAAYwH,EAAO7H,OAE/B,KAAKF,EACD,OAAO,2BACAuB,GADP,IAEIjB,aAAayH,EAAOxF,KAAKjC,aACzBD,QAAQ0H,EAAOxF,KAAKa,iBAE5B,QACI,OAAO7B,IWjEf8E,qBDKgC,WAAkC,IAAjC9E,EAAgC,uDAAxBnB,EAAa2H,EAAW,uCAGjE,GAFA1F,QAAQC,IAAI,uBAAwByF,GAE5BA,EAAO5H,OACNL,EAAL,CAEI,IAAQyC,EAASwF,EAATxF,KACA+D,EAAoB/E,EAApB+E,gBACFiD,EAAYjD,EAAgBkD,WAAU,SAAA7D,GAAG,OAAIA,EAAI5D,UAAYQ,EAAKR,WAClE0H,EAAmB,YAAOnD,GAUhC,OATAjE,QAAQC,IAAI,sBAAwBiH,GAChCA,GAAa,EACbE,EAAoBC,OAAOH,EAAW,EAAGhH,GAGzCkH,EAAoBxD,KAAK1D,GAItB,2BACAhB,GADP,IAEI+E,gBAAiBmD,IAIrB,OAAOlI,K,QE1BboI,EAAQC,YAAY/B,EAAagC,YACrCC,YACEC,KAE6C,qBAAxCC,OAAOC,6BACV,SAAAjI,GAAC,OAAIA,GACLgI,OAAOC,8BACTD,OAAOC,iCAGXC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUT,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJU,SAASC,eAAe,SAM1BpD,M","file":"static/js/main.f587eba0.chunk.js","sourcesContent":["// export const API_KEY = \"Rlivcvu8LqidxlnDZlg5d1dGFL5N4p95\"\r\nexport const API_KEY = \"9WNZsVTjUH7OfCV8vCmWir9rnGELFggu\"\r\nexport const CURRENT_WEATHER_URI = \"https://dataservice.accuweather.com/currentconditions/v1/\"\r\nexport const CITY_URI = \"https://dataservice.accuweather.com/locations/v1/cities/autocomplete?\"\r\nexport const DAILY_FORECASTS_URI = \"https://dataservice.accuweather.com/forecasts/v1/daily/5day/\"\r\nexport const CURRENT_LOCATION_GEOPOSITION_URI = \"https://dataservice.accuweather.com/locations/v1/cities/geoposition/search\" ","\r\n//ACCUWEATHER API\r\nexport const DEFAULT_LOAD_WEATHER = 'DEFAULT_LOAD_WEATHER';\r\nexport const AUTO_COMPLETE = 'AUTO_COMPLETE';\r\nexport const DAILY_FORECASTS = 'DAILY_FORECASTS';\r\n\r\n//Geolocation API and ACCUWEATHER API\r\nexport const GET_CURRENT_LOCATION = 'GET_CURRENT_LOCATION';\r\n\r\n\r\n//LOCAL DATA UPDATE\r\nexport const CHANGE_UNIT_DEGREES = 'CHANGE_UNIT_DEGREES';\r\nexport const ADD_TO_FAVORITES = 'ADD_TO_FAVORITES';\r\nexport const UPDATE_CITY_NAME = 'UPDATE_CITY_NAME';\r\nexport const CURRENT_WEATHER_FROM_FAVORITES = 'CURRENT_WEATHER_FROM_FAVORITES';","import {\r\n    API_KEY,\r\n    CURRENT_WEATHER_URI,\r\n    CITY_URI,\r\n    DAILY_FORECASTS_URI,\r\n    CURRENT_LOCATION_GEOPOSITION_URI\r\n} from \"../shared/accWeatherApi\";\r\n\r\nimport {\r\n    GET_CURRENT_LOCATION,\r\n    UPDATE_CITY_NAME,\r\n    DEFAULT_LOAD_WEATHER,\r\n    AUTO_COMPLETE,\r\n    DAILY_FORECASTS,\r\n    CHANGE_UNIT_DEGREES,\r\n    ADD_TO_FAVORITES,\r\n    CURRENT_WEATHER_FROM_FAVORITES\r\n} from \"./types\";\r\n\r\n\r\n//http://dataservice.accuweather.com/locations/v1/cities/geoposition/search?apikey=yIS7IdPp0gk2fQ4NU5fRmpEjBZoJvzKR&q=32.085300%2C34.781769&toplevel=true\r\nexport function  currentGeopostion() {\r\n    \r\n    const location = {\r\n        latitude: 0,\r\n        longitude: 0\r\n    };\r\n    if (!navigator.geolocation) {\r\n        console.log(\"Geolocation is'nt support in your browser\");\r\n    } else {\r\n        navigator.geolocation.getCurrentPosition((position) => {\r\n\r\n            location.latitude = position.coords.latitude;\r\n            location.longitude = position.coords.longitude;\r\n\r\n\r\n        })\r\n        return {\r\n            type: GET_CURRENT_LOCATION,\r\n            data: {\r\n                location\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\n//http://dataservice.accuweather.com/locations/v1/cities/geoposition/search?apikey=yIS7IdPp0gk2fQ4NU5fRmpEjBZoJvzKR&q=32.085300%2C34.781769&toplevel=true\r\n\r\n// export function currentGeopostion() {\r\n//     const location = {\r\n//         latitude: 0,\r\n//         longitude: 0\r\n//     };\r\n//     if (!navigator.geolocation) {\r\n//         console.log(\"Geolocation is'nt support in your browser\");\r\n//     } else {\r\n//         navigator.geolocation.getCurrentPosition((position) => {\r\n//             location.latitude = position.coords.latitude;\r\n//             location.longitude = position.coords.longitude;\r\n//         })\r\n//         console.log(\"location is >>>>\", location);\r\n//     }\r\n//     return dispatch => {\r\n//         console.log(\"location is >>>>\", location);\r\n//         dispatch(getCurrentLocation(location.latitude, location.longitude));\r\n//     }\r\n\r\n//}\r\n\r\nfunction getCurrentLocation(latitude, longitude) {\r\n\r\n    return async dispatch => {\r\n\r\n        console.log(\"location  getCurrentLocation >>>>\", latitude, longitude);\r\n        try {\r\n            const response = await fetch(CURRENT_LOCATION_GEOPOSITION_URI +\r\n                \"?apikey=\" + API_KEY + \"&q=\" + latitude + \"C\" + longitude + \"&toplevel=true\");\r\n            // const response = await fetch(\"http://dataservice.accuweather.com/locations/v1/cities/geoposition/search?apikey=yIS7IdPp0gk2fQ4NU5fRmpEjBZoJvzKR&q=32.085300%2C34.781769&toplevel=true\")\r\n            const jsonData = await response.json();\r\n            dispatch({\r\n                type: GET_CURRENT_LOCATION,\r\n                data: jsonData\r\n            })\r\n\r\n        } catch (err) {\r\n            console.log(\"error in loading data >> \", err.type);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nexport function defaultLoadWeathr(cityKey = \"215854\") {\r\n    return async dispatch => {\r\n        try {\r\n            const response = await fetch(CURRENT_WEATHER_URI + cityKey + \"?apikey=\" + API_KEY);\r\n            const jsonData = await response.json();\r\n            console.log(\"defaultLoadWeathr>>\");\r\n            dispatch({\r\n                type: DEFAULT_LOAD_WEATHER,\r\n                data: jsonData\r\n            })\r\n        } catch (err) {\r\n            console.log(\"error in loading data >> \", err.type);\r\n        }\r\n    }\r\n}\r\n\r\nexport function autoComplete(city) {\r\n    return async dispatch => {\r\n        try {\r\n            const response = await fetch(CITY_URI + \"apikey=\" + API_KEY + \"&q=\" + city);\r\n            const jsonData = await response.json();\r\n            dispatch({\r\n                type: AUTO_COMPLETE,\r\n                data: jsonData\r\n            })\r\n\r\n        } catch (err) {\r\n            console.log(\"error in loading data >> \", err.type);\r\n        }\r\n    }\r\n}\r\n\r\nexport function dailyForecasts(cityKey = \"215854\") {\r\n    return async dispatch => {\r\n        try {\r\n            const response = await fetch(DAILY_FORECASTS_URI + cityKey + \"?apikey=\" + API_KEY);\r\n            const jsonData = await response.json();\r\n\r\n            dispatch({\r\n                type: DAILY_FORECASTS,\r\n                data: jsonData\r\n            })\r\n        } catch (err) {\r\n            console.log(\"error in loading data >> \", err.type);\r\n        }\r\n    }\r\n}\r\n\r\nexport function changeUnitDegrees(unit) {\r\n    return {\r\n        type: CHANGE_UNIT_DEGREES,\r\n        unit: unit\r\n    }\r\n}\r\n\r\nexport function addToFavorites(city, cityKey, currentWeather, dailyWeather) {\r\n    return {\r\n        type: ADD_TO_FAVORITES,\r\n        data: {\r\n            city,\r\n            cityKey,\r\n            currentWeather,\r\n            dailyWeather\r\n        }\r\n    }\r\n}\r\n\r\n// CURRENT_WEATHER_FROM_FAVORITES\r\nexport function weatherFromFavorites(city, cityKey, currentWeather, dailyWeather) {\r\n    return dispatch => {\r\n        dispatch({\r\n            type: UPDATE_CITY_NAME,\r\n            data: {\r\n                city,\r\n                cityKey\r\n            }\r\n        });\r\n        dispatch({\r\n            type: CURRENT_WEATHER_FROM_FAVORITES,\r\n            data: {\r\n                currentWeather,\r\n                dailyWeather\r\n            }\r\n        });\r\n\r\n    }\r\n}\r\n\r\n\r\n","import { DEFAULT_LOAD_WEATHER, DAILY_FORECASTS, CHANGE_UNIT_DEGREES, CURRENT_WEATHER_FROM_FAVORITES } from \"./types\";\r\nimport uniqid from 'uniqid';\r\n\r\nconst intialState = {\r\n    weather: [],\r\n    weatherDaily: [],\r\n    unitDegrees:\"C\"\r\n}\r\n\r\nexport const mainCardReducer = (state = intialState, action) => {\r\n    console.log(\"mainCard Reducer > \", action);\r\n    switch (action.type) {\r\n\r\n        case DEFAULT_LOAD_WEATHER:\r\n            const currentWeather = action.data.map(res => {\r\n\r\n                return {\r\n                    weatherText: res.WeatherText,\r\n                    weatherIcon: res.WeatherIcon,\r\n                    celsius: res.Temperature.Metric.Value,\r\n                    fahrenheit: res.Temperature.Imperial.Value,\r\n                    date: res.LocalObservationDateTime\r\n                }\r\n            })\r\n\r\n            return {\r\n                ...state,\r\n                weather: currentWeather\r\n            }\r\n        case DAILY_FORECASTS:\r\n            const newDailyForecasts = action.data.DailyForecasts.map(res => {\r\n\r\n                const fahMinValue = res.Temperature.Minimum.Value;\r\n                const fahMaxValue = res.Temperature.Maximum.Value;\r\n                const celMinValue = fToC(fahMinValue);\r\n                const celMaxValue = fToC(fahMaxValue);\r\n                /*** Day and Night objects have *** \r\n                 * \"Day\": {\r\n                \"Icon\": 6,\r\n                \"IconPhrase\": \"Mostly cloudy\",\r\n                \"HasPrecipitation\": false\r\n       \r\n                 */\r\n                return {\r\n                    weatherDay: res.Day,\r\n                    weatherNight: res.Night,\r\n                    // weatherIconDay: res.WeatherIcon,\r\n                    celsiusMin: celMinValue,\r\n                    celsiusMax: celMaxValue,\r\n                    fahrenheitMin: fahMinValue,\r\n                    fahrenheitMax: fahMaxValue,\r\n                    date: res.Date,\r\n                    dayId:uniqid()\r\n\r\n                }\r\n            })\r\n            return {\r\n                ...state,\r\n                weatherDaily:newDailyForecasts\r\n            }\r\n\r\n        case CHANGE_UNIT_DEGREES:\r\n                return {\r\n                    ...state,\r\n                    unitDegrees:action.unit\r\n                }\r\n        case CURRENT_WEATHER_FROM_FAVORITES:\r\n            return {\r\n                ...state,\r\n                weatherDaily:action.data.weatherDaily,\r\n                weather:action.data.currentWeather\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nfunction round(num) {\r\n    const m = Number((Math.abs(num) * 100).toPrecision(15));\r\n    return Math.round(m) / 100 * Math.sign(num);\r\n}\r\nfunction fToC(fahrenheit) {\r\n    const celsius = (fahrenheit - 32) * 5 / 9;\r\n    return round(celsius);\r\n}\r\n\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Card, Col, Container, Row, Button } from 'react-bootstrap';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { defaultLoadWeathr, changeUnitDegrees, addToFavorites } from '../../redux/actions';\r\nimport { FaExchangeAlt } from  'react-icons/fa';\r\nimport './MainCardComponent.css'\r\nimport { mainCardReducer } from '../../redux/mainCradReducer';\r\n\r\nfunction MainCardComponent({ city }) {\r\n\r\n\r\n    const [unit, setUnit] = useState(\"celsius\");\r\n\r\n    const weather = useSelector(state => {\r\n        const { mainCardReducer } = state;\r\n        return mainCardReducer.weather;\r\n    })\r\n    const cityData = useSelector(state => {\r\n        const { homePageReducer } = state;\r\n        return homePageReducer;\r\n    })\r\n    const dailyWeather = useSelector(state => {\r\n        const { mainCardReducer } = state;\r\n        return mainCardReducer.weatherDaily;\r\n    });\r\n \r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(defaultLoadWeathr(cityData.cityKey));\r\n    }, [cityData.cityKey]);\r\n\r\n    const icon = () => {\r\n        const iconId = Number(weather[0].weatherIcon) < 10 ? `0${weather[0].weatherIcon}` : weather[0].weatherIcon;\r\n        return `https://developer.accuweather.com/sites/default/files/${iconId}-s.png`\r\n    }\r\n    const getDate = () => {\r\n        // const date = new Date(weather[0].date.replace(/\\T.*/, \"\"));\r\n        const date = new Date(weather[0].date);\r\n        return date.toDateString();\r\n    }\r\n\r\n    const changeTemperatureUnit = () => {\r\n        if (unit === \"celsius\") {\r\n            setUnit(\"fahrenheit\");\r\n            dispatch(changeUnitDegrees(\"F\"));\r\n        }\r\n        else {\r\n            setUnit(\"celsius\");\r\n            dispatch(changeUnitDegrees(\"C\"));\r\n        }\r\n    }\r\n\r\n    //addToFavorites(city, currentWeather, dailyWeather)\r\n\r\n    const onSave = () =>{\r\n        console.log(\"onSave\");\r\n        dispatch(addToFavorites(cityData.text,cityData.cityKey ,weather , dailyWeather) );\r\n    }\r\n\r\n    return (\r\n\r\n        <div className=\"c-main-card\">\r\n            {!!weather.length && <Container fluid=\"md\">\r\n                <Row>\r\n                    <Col >\r\n                        <h1 className=\"current-date\">{cityData.text}</h1>\r\n                        <h1 className=\"current-date\">{getDate()}</h1>\r\n                    </Col>\r\n                    <Col>\r\n                        <div className=\"favorites-container\">\r\n                            <div className=\"btn-favorites\" onClick={onSave}><h5>♥ save</h5></div>\r\n                            <div className=\"btn-favorites\" onClick={changeTemperatureUnit}><h5>C <FaExchangeAlt/> F</h5></div>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"align-items-center\">\r\n                    <Col>\r\n                        <div className=\"container-weather-img\">\r\n                            <img className=\"weather-img\" src={icon()} />\r\n                        </div>\r\n                    </Col>\r\n                    <Col>\r\n                        {\r\n                            unit === \"celsius\" ?\r\n                                <h1 className=\"weather-temperature\">{weather[0][unit]}&deg;C</h1> :\r\n                                <h1 className=\"weather-temperature\">{weather[0][unit]}&deg;F</h1>\r\n                        }\r\n                        <h1 className=\"weather-text\">{weather[0].weatherText}</h1>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n            }\r\n        </div>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default MainCardComponent;","\r\nimport { useEffect, useState } from 'react';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport './WeatherSingleCard.css';\r\n\r\n\r\nfunction WeatherSingleCard({ weather,unitDegrees }) {\r\n    const { weatherDay,\r\n        weatherNight,\r\n        celsiusMin,\r\n        celsiusMax,\r\n        fahrenheitMin, \r\n        fahrenheitMax,\r\n        date } = weather;\r\n\r\n   \r\n\r\n    const [isDay, setIsDay] = useState(\"weatherDay\");\r\n\r\n    useEffect(() => {\r\n        const date = new Date();\r\n        if ((date.getHours() >= 17)||(date.getHours()<=5) ){\r\n            setIsDay(\"weatherNight\");\r\n        }\r\n\r\n    }, []);\r\n\r\n    const icon = () => {\r\n        const accuWeatherIcons = \"https://developer.accuweather.com/sites/default/files/\"\r\n            const iconId = Number(weather[isDay].Icon) < 10 ? `0${weather[isDay].Icon}` : weather[isDay].Icon;\r\n            return `${accuWeatherIcons}${iconId}-s.png`;\r\n    }\r\n    \r\n    const weatherText = () => {\r\n        const text = weather[isDay].IconPhrase;\r\n        return text.replace(\"w/\",'');\r\n    }\r\n\r\n    const getDate = () => {\r\n        const day = new Date(date);\r\n        return day.toDateString();\r\n    }\r\n    \r\n    const temperature  = () =>  unitDegrees === \"C\"?<h1> {celsiusMin}&deg;C~{celsiusMax}&deg;C</h1> : <h1> {fahrenheitMin}&deg;F~{fahrenheitMax}&deg;F</h1>  \r\n    \r\n    return (\r\n            <Container fluid className=\"c-weather-single-card back-ground-color\">\r\n                <Row >\r\n                    <Col >\r\n                        <div className=\"single-day-container\">\r\n                            <h1>\r\n                            {getDate()}\r\n                            </h1>\r\n                             <div className=\"container-weather-img\">\r\n                                <img className=\"single-weather-img\" src={icon()} />\r\n                            </div> \r\n                            {temperature()}\r\n                            <h1>\r\n                            {weatherText()}\r\n                            </h1>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n       \r\n    );\r\n}\r\n\r\nexport default WeatherSingleCard;","import React, { useEffect, useState } from 'react';\r\nimport { Col, Container, Row } from 'react-bootstrap';\r\nimport './HomePage.css'\r\nimport { GoLocation } from 'react-icons/go'\r\nimport MainCardComponent from '../../components/MainCardComponent/MainCardComponent';\r\nimport WeatherSingleCard from '../../components/WeatherSingleCard/WeatherSingleCard';\r\nimport {  currentGeopostion, autoComplete, dailyForecasts } from '../../redux/actions';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\n\r\n\r\nfunction HomePage(props) {\r\n    // const [lng, setLng] = useState(0);\r\n    // const [lat, setLat] = useState(0);\r\n\r\n    const [textCity, setTextCity] = useState(\"\");\r\n\r\n    const dispatch = useDispatch();\r\n    const city = useSelector(state => {\r\n        // console.log(\"state >>>>\", state);\r\n        const { homePageReducer } = state;\r\n        return homePageReducer;\r\n    });\r\n\r\n\r\n    \r\n    // console.log(\"currentLocation>>>>>\", currentLocation);\r\n\r\n    // const {dailyWeather} = useSelector(state => {\r\n    //     const { mainCardReducer } = state;\r\n    //     return mainCardReducer.weatherDaily;\r\n    // })\r\n\r\n\r\n    const weatherDaily = useSelector(state => {\r\n        const { mainCardReducer } = state;\r\n        return mainCardReducer.weatherDaily;\r\n    })\r\n    const unitDegrees = useSelector(state => {\r\n        const { mainCardReducer } = state;\r\n        return mainCardReducer.unitDegrees;\r\n    })\r\n    console.log(\"unit degrees >>>>\", unitDegrees);\r\n\r\n    // const weatherPerDay = dailyWeather.map(day => {\r\n    //     return <Col> <WeatherSingleCard weather={day} /></Col>\r\n    // });\r\n\r\n    const handleGetLocation = () => {\r\n        dispatch(currentGeopostion());\r\n    }\r\n\r\n\r\n    const handleChange = (e) => {\r\n        // console.log(\"handle text >>\", e.target.value);\r\n        // dispatch(inputText(e.target.value));\r\n        setTextCity(e.target.value);\r\n    }\r\n\r\n\r\n\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        // dispatch(inputText(textCity));\r\n        dispatch(autoComplete(textCity))\r\n        setTextCity(\"\");\r\n    }\r\n\r\n    useEffect(() => {\r\n        dispatch(dailyForecasts(city.cityKey))\r\n    }, [city.cityKey])\r\n\r\n    return (\r\n        <div className=\"p-home\">\r\n            <Container fluid>\r\n            {/* <Row className=\"justify-content-center\" > */}\r\n                <Row className=\"justify-content-center\" >\r\n                    <Col md=\"auto\">\r\n                        <form onSubmit={handleSubmit}>\r\n                            <div className=\"frame-input\">\r\n                                <input className=\"search-input\" type=\"text\" placeholder=\"The city name\" onChange={handleChange} value={textCity} />\r\n\r\n                            </div>\r\n                            {/* <h1>{`latitude = ${currentLocation.latitude} longitude = ${currentLocation.longitude}`}</h1> */}\r\n                            <input type=\"submit\" hidden />\r\n                        </form>\r\n                    </Col>\r\n                    {/* <Col md=\"auto\">\r\n                        <div className=\"location-btn\"><GoLocation color=\"#F05514\" onClick={handleGetLocation} /></div>\r\n                    </Col> */}\r\n                </Row>\r\n                <Row >\r\n                    <MainCardComponent city={city.text} />\r\n                </Row>\r\n\r\n                <div className=\"back-ground-color\">\r\n                    <Row xs={1} md={3} xxl={5}>\r\n\r\n                        {!!weatherDaily && weatherDaily.map(res => {\r\n                            return <Col key={res.dayId}> <WeatherSingleCard weather={res} unitDegrees={unitDegrees} /> </Col>\r\n                        })\r\n\r\n                        }\r\n                    </Row>\r\n                </div>\r\n\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HomePage;","\r\nimport React from 'react';\r\nimport './CityWeatherCard.css'\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport { useDispatch } from 'react-redux';\r\n// import { Redirect } from 'react-router';\r\nimport { weatherFromFavorites } from '../../redux/actions'\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nfunction CityWeatherCard({ cityData }) {\r\n    /**\r\n   *  data: {\r\n              city,\r\n              currentWeather,\r\n              dailyWeather\r\n          }\r\n   */\r\n\r\n    //weatherFromFavorites(city, cityKey, currentWeather, dailyWeather)\r\n    const dispatch = useDispatch();\r\n    const { currentWeather, dailyWeather, city, cityKey } = cityData;\r\n    const history = useHistory();\r\n\r\n    const clickOnCard = () => {\r\n        dispatch(weatherFromFavorites(city, cityKey, currentWeather, dailyWeather));\r\n        // window.location.href=\"#/\"\r\n        history.push(\"/#\")\r\n    }\r\n\r\n    const icon = () => {\r\n        const iconId = Number(currentWeather[0].weatherIcon) < 10 ? `0${currentWeather[0].weatherIcon}` : currentWeather[0].weatherIcon;\r\n        return `https://developer.accuweather.com/sites/default/files/${iconId}-s.png`\r\n    }\r\n\r\n\r\n\r\n    return (\r\n\r\n        <Container fluid className=\"c-weather-single-card back-ground-color\" onClick={clickOnCard}>\r\n\r\n            <Row >\r\n                <Col >\r\n                    <div className=\"single-day-container\">\r\n                        <h1 className=\"city-color\">\r\n                            {city}\r\n                        </h1>\r\n                        <div className=\"container-weather-img\">\r\n                            <img className=\"single-weather-img\" src={icon()} />\r\n                        </div>\r\n                        <h1>\r\n                            {currentWeather[0].celsius}&deg;C\r\n                        </h1>\r\n                        <h1>\r\n                            {currentWeather[0].weatherText}\r\n                        </h1>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n\r\n        </Container>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default CityWeatherCard;","import React from 'react';\r\nimport { Container, Row, Col } from 'react-bootstrap';\r\nimport { useSelector } from 'react-redux';\r\nimport CityWeatherCard from '../../components/CityWeatherCard/CityWeatherCard';\r\n\r\n\r\n\r\n\r\nimport './FavoritesPage.css'\r\n\r\nfunction FavoritesPage(props) {\r\n\r\n\r\n\r\n    const cities = useSelector((state) => {\r\n        const { favoritesPageReducer } = state;\r\n        return favoritesPageReducer.citiesForecasts;\r\n    })\r\n\r\n    const citiesCards = cities.map(res => {\r\n        return <Col key={res.cityKey} > <CityWeatherCard cityData={res} /> </Col>\r\n    })\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"p-favorites\">\r\n            <Container fluid  className=\"back-ground-color\">\r\n                <Row xs={1} md={3} xxl={5}>\r\n                    {citiesCards.length ?citiesCards : \r\n                    <Col><h1>The list emty yet. </h1></Col>  }\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default FavoritesPage;","import React from 'react';\r\nimport { Container, Nav, Navbar } from 'react-bootstrap';\r\n\r\nfunction WeatherNavBar(props) {\r\n    return (\r\n        <div>\r\n            <Navbar bg=\"light\" variant=\"light\">\r\n                <Container>\r\n                    <Navbar.Brand href=\"#/\">Weather App</Navbar.Brand>\r\n                    <Nav className=\"me-auto\">\r\n                        <Nav.Link href=\"#/\">Home</Nav.Link>\r\n                        <Nav.Link href=\"#/Favorite\">Favorite</Nav.Link>\r\n                    </Nav>\r\n                </Container>\r\n            </Navbar>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WeatherNavBar;","import './App.css';\nimport HomePage from './pages/HomePage/HomePage';\nimport FavoritesPage from './pages/FavoritesPage/FavoritesPage';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport WeatherNavBar from './components/WeatherNavBar/WeatherNavBar';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <WeatherNavBar/>\n      <HashRouter>\n        <Switch>\n          <Route exact path=\"/\">\n            <HomePage />\n          </Route>\n          <Route exact path=\"/favorite\"> \n          <FavoritesPage />\n          </Route>\n        </Switch>\n      </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { GET_CURRENT_LOCATION, UPDATE_CITY_NAME, AUTO_COMPLETE } from \"./types\";\r\n\r\nconst intialState = {\r\n    // location: {\r\n    longitude: 34.855499,\r\n    latitude: 32.109333,\r\n    // },\r\n    text: \"Tel Aviv\",\r\n    cityKey: \"215854\"\r\n}\r\n\r\nexport const homePageReducer = (state = intialState, action) => {\r\n    console.log(\"input homePageReducer\", action);\r\n\r\n    switch (action.type) {\r\n\r\n        case UPDATE_CITY_NAME:\r\n            return {\r\n                ...state,\r\n                text: action.data.city,\r\n                // cityKey:action.data.cityKey\r\n\r\n            }\r\n        // case GET_CURRENT_LOCATION:\r\n        //         const gCity = action.data.LocalizedName;\r\n        //         const gCityKey = action.data.Key\r\n        //     return {\r\n        //         ...state,\r\n        //         text:gCity,\r\n        //         cityKey:gCityKey\r\n        //     }\r\n\r\n        case GET_CURRENT_LOCATION:\r\n            // const gLongitude = action.data.location.longitude;\r\n            // const gLatitude = action.data.location.latitude;\r\n            return {\r\n                ...state,\r\n                longitude: action.data.location.longitude,\r\n                latitude: action.data.location.latitude\r\n            }\r\n        case AUTO_COMPLETE:\r\n            const newCity = action.data[0].LocalizedName;\r\n            const newCityKey = action.data[0].Key;\r\n            return {\r\n                ...state,\r\n                text: newCity,\r\n                cityKey: newCityKey\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}","import { ADD_TO_FAVORITES } from './types';\r\n\r\nconst intialState = {\r\n    citiesForecasts: []\r\n\r\n};\r\n/**\r\n *  data: {\r\n            city,\r\n            currentWeather,\r\n            dailyWeather\r\n        }\r\n */\r\nexport const favoritesPageReducer = (state = intialState, action) => {\r\n    console.log(\"favoritesPageReducer\", action);\r\n\r\n    switch (action.type) {\r\n        case ADD_TO_FAVORITES:\r\n\r\n            const { data } = action;\r\n            const { citiesForecasts } = state;\r\n            const itemIndex = citiesForecasts.findIndex(res => res.cityKey === data.cityKey);\r\n            const nextCitiesForecasts = [...citiesForecasts];\r\n            console.log(\"itemIndex>>>>>>>>\", (!!itemIndex));\r\n            if (itemIndex > -1) {\r\n                nextCitiesForecasts.splice(itemIndex, 1, data);\r\n            }\r\n            else {\r\n                nextCitiesForecasts.push(data);\r\n            }\r\n            // nextCitiesForecasts.push(data);\r\n\r\n            return {\r\n                ...state,\r\n                citiesForecasts: nextCitiesForecasts\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n\r\n","import { combineReducers } from \"redux\";\r\nimport { homePageReducer } from \"./homePageReducer\";\r\nimport { mainCardReducer } from \"./mainCradReducer\";\r\nimport { favoritesPageReducer } from \"./favoritesPageReducer\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    homePageReducer,\r\n    mainCardReducer,\r\n    favoritesPageReducer\r\n\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport { rootReducer } from './redux/rootReducer';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\n\n\nconst store = createStore(rootReducer, compose(\n  applyMiddleware(\n    thunk\n  ),\n  typeof window.__REDUX_DEVTOOLS_EXTENSION__ === \"undefined\"\n    ? a => a\n    : window.__REDUX_DEVTOOLS_EXTENSION__ &&\n    window.__REDUX_DEVTOOLS_EXTENSION__()\n));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}